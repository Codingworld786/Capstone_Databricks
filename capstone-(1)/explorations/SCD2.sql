-- Databricks notebook source
-- MAGIC %md
-- MAGIC ### Example Exploratory Notebook
-- MAGIC
-- MAGIC Use this notebook to explore the data generated by the pipeline in your preferred programming language.
-- MAGIC
-- MAGIC **Note**: This notebook is not executed as part of the pipeline.

-- COMMAND ----------

USE CATALOG `capstone`;
USE SCHEMA `silver`;

-- COMMAND ----------

SELECT * from samples.nyctaxi.trips

-- COMMAND ----------

CREATE TABLE IF NOT EXISTS capstone.silver.customers_scd2 (
    customer_id STRING,
    first_name STRING,
    last_name STRING,
    email STRING,
    phone STRING,
    date_of_birth DATE,
    gender STRING,
    annual_income DOUBLE,
    pan_number STRING,
    aadhar_number STRING,
    city STRING,
    state STRING,
    pincode STRING,
    customer_since DATE,
    kyc_status STRING,
    credit_score INT,
    risk_category STRING,
    is_active BOOLEAN,
    effective_start TIMESTAMP,
    effective_end TIMESTAMP,
    is_current BOOLEAN
);


-- COMMAND ----------

INSERT INTO capstone.silver.customers_dim (
    customer_id, first_name, last_name, email, phone, date_of_birth,
    gender, annual_income, pan_number, aadhar_number, city, state,
    pincode, customer_since, kyc_status, credit_score, risk_category,
    is_active, effective_start, effective_end, is_current
)
SELECT 
    customer_id, first_name, last_name, email, phone, date_of_birth,
    gender, annual_income, pan_number, aadhar_number, city, state,
    pincode, customer_since, kyc_status, credit_score, risk_category,
    is_active, current_timestamp(), NULL, TRUE
FROM capstone.silver.customers_cleaned;


-- COMMAND ----------

--This `MERGE` tracks customer history using SCD Type 2.
--It closes old records when key details change and inserts new active versions.
--Only one version per customer stays marked as current.


MERGE INTO capstone.silver.customers_dim AS target
USING capstone.silver.customers_cleaned AS source
ON target.customer_id = source.customer_id
AND target.is_current = TRUE

WHEN MATCHED AND (
    target.city <> source.city OR
    target.annual_income <> source.annual_income OR
    target.kyc_status <> source.kyc_status OR
    target.credit_score <> source.credit_score
) THEN
  UPDATE SET
    target.effective_end = current_timestamp(),
    target.is_current = FALSE

WHEN NOT MATCHED BY TARGET THEN
  INSERT (
    customer_id, first_name, last_name, email, phone, date_of_birth,
    gender, annual_income, pan_number, aadhar_number, city, state,
    pincode, customer_since, kyc_status, credit_score, risk_category,
    is_active, effective_start, effective_end, is_current
  )
  VALUES (
    source.customer_id, source.first_name, source.last_name, source.email, source.phone,
    source.date_of_birth, source.gender, source.annual_income, source.pan_number,
    source.aadhar_number, source.city, source.state, source.pincode,
    source.customer_since, source.kyc_status, source.credit_score,
    source.risk_category, source.is_active, current_timestamp(), NULL, TRUE
  );


-- COMMAND ----------


